import os

def xor_decrypt(input_file, output_file, key):
    with open(input_file, 'rb') as f_in, open(output_file, 'wb') as f_out:
        i = 0
        while True:
            byte = f_in.read(1)
            if not byte:
                break
            f_out.write(bytes([byte[0] ^ key[i % len(key)]]))
            i += 1

def is_valid_bmp_header(file_path):
    with open(file_path, 'rb') as f:
        header = f.read(2)
    return header in (b'BM', b'BA', b'CI', b'CP', b'IC', b'PT')

def try_keys(input_file, keys):
    for key in keys:
        temp_output = 'temp_decrypted.bmp'
        xor_decrypt(input_file, temp_output, key)
        if is_valid_bmp_header(temp_output):
            print(f'Valid BMP header found with key: {key}')
            os.rename(temp_output, 'decrypted.bmp')
            return
        else:
            os.remove(temp_output)
    print('No valid key found.')

input_file = 'ch2.bmp'

# Example list of keys
keys = [
    bytes([0xaa, 0xb6]),
    bytes([0x8a, 0x96]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2]),
    bytes([0x0a, 0x96, 0x8a, 0xd2]),
    bytes([0xb9, 0xb6, 0xaa, 0xbb, 0xb9, 0xb6]),
    bytes([0x99, 0x96, 0x8a, 0x9b, 0x99, 0x96]),
    bytes([0x39, 0xb6, 0xaa, 0xf2, 0x38, 0xbb, 0xb9, 0xfc]),
    bytes([0x39, 0xb8, 0xaa, 0xf2, 0x38, 0xbb, 0xb9, 0xfc]),
    bytes([0x19, 0x96, 0x8a, 0xd2, 0x18, 0x9b, 0x99, 0xdc]),
    bytes([0x19, 0x98, 0x8a, 0xd2, 0x18, 0x9b, 0x99, 0xdc]),
    bytes([0xaa, 0xb6, 0xaa, 0xb6, 0xaa, 0xb6, 0xaa, 0xb6, 0xaa, 0xb6]),
    bytes([0x8a, 0x96, 0x8a, 0x96, 0x8a, 0x96, 0x8a, 0x96, 0x8a, 0x96]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x39, 0xbb, 0xb9, 0xf1]),
    bytes([0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x19, 0x9b, 0x99, 0xd1]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x38, 0xbb, 0xb9, 0xfc, 0x39, 0xb8, 0xab, 0xf1, 0x2a, 0xb6, 0xaa, 0xf2]),
    bytes([0x0a, 0x96, 0x8a, 0xd2, 0x18, 0x9b, 0x99, 0xdc, 0x19, 0x98, 0x8b, 0xd1, 0x0a, 0x96, 0x8a, 0xd2]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2]),
    bytes([0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x38, 0xb6, 0xb9, 0xfc, 0x39, 0xb8, 0xb9, 0xf1, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x38, 0xbb, 0xb9, 0xfc]),
    bytes([0x0a, 0x98, 0x8a, 0xd2, 0x18, 0x96, 0x99, 0xdc, 0x19, 0x98, 0x99, 0xd1, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x18, 0x9b, 0x99, 0xdc]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2]),
    bytes([0x39, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2, 0x2a, 0xb6, 0xaa, 0xf2]),
    bytes([0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2]),
    bytes([0x19, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2, 0x0a, 0x96, 0x8a, 0xd2]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x8b, 0xba, 0xaf, 0x28, 0xb8, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x8b, 0xba, 0xaf, 0x28, 0xb8, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xbb, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x8b, 0xba, 0xaf, 0x28, 0xbb, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x8b, 0xba, 0xaf, 0x28, 0xbb, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x8b, 0x6a, 0xaf, 0x28, 0xb8, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x8b, 0x6a, 0xaf, 0x28, 0xb8, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xbb, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x8b, 0x6a, 0xaf, 0x28, 0xbb, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb6, 0xaa, 0xf2, 0x8b, 0x6a, 0xaf, 0x28, 0xbb, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x8b, 0xba, 0xaf, 0x28, 0xb8, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x8b, 0xba, 0xaf, 0x28, 0xb8, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xbb, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x8b, 0xba, 0xaf, 0x28, 0xbb, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x8b, 0xba, 0xaf, 0x28, 0xbb, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xbb, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x8b, 0x6a, 0xaf, 0x28, 0xb8, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x8b, 0x6a, 0xaf, 0x28, 0xb8, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28, 0xbb, 0x9f, 0xc9]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x8b, 0x6a, 0xaf, 0x28, 0xb6, 0xaa, 0xf2, 0x8b, 0xbb, 0xb9, 0xfc, 0x9b, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0xb9, 0xfc, 0x9b, 0x8a, 0xaf, 0x28]),
    bytes([0x2a, 0xb8, 0xaa, 0xf2, 0x8b, 0x6a, 0xaf, 0x28, 0xbb, 0xb9, 0xfc, 0x9b, 0xc9, 0xb8, 0xaa, 0xf2, 0x8b, 0xb6, 0xb9, 0xfc, 0xaa, 0xf2, 0x8b, 0xbb, 0xb9, 0xfc, 0x9b, 0xaa, 0xf2, 0x8b, 0xbb, 0x9f, 0xc9]),
]

try_keys(input_file, keys)
